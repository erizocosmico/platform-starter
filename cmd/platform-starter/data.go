// Code generated by go-bindata.
// sources:
// config/.csscomb.json
// config/.editorconfig
// config/.eslintrc.js
// config/.gitignore
// hooks/pre-commit
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configCsscombJson = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x92\x4d\x76\xdb\x30\x0c\x84\xf7\x3e\x05\x1f\xd7\xc5\x05\x7c\x96\x6e\x40\x6a\xe4\xf0\x05\x02\x54\x10\x8e\x9b\xf4\xf5\xee\x7d\x72\xaa\xb6\x52\x65\x6f\x39\x1f\x66\x88\x9f\x1f\xa7\x94\x52\xca\x8e\xc9\xde\x40\x98\xe6\x78\x27\xbf\x0a\x3a\xa2\xe7\x73\x0a\xbf\xe2\xcb\x27\xc2\x72\xe3\xf7\x4e\x1d\x53\xab\x26\xa6\x5b\x75\x79\x72\xaa\xdc\x91\xcf\x29\x8b\xdd\xe0\xf9\xb7\x54\xc4\xea\x2b\x35\x1d\xa0\xb1\x88\xf7\xc7\x4d\x59\x7f\x31\x8f\x17\xd6\x21\x9f\xd3\xc8\xd2\x57\x53\x08\x26\x68\x1c\xdb\xc2\x46\x52\xdc\xa4\x29\xb6\x5f\x11\xf0\xd0\xf4\x42\x1f\x70\xdb\x19\x7e\xbb\x5a\x60\xe9\x2b\xf7\xa6\x17\xc1\xea\xd5\xcd\x83\xcc\x07\x38\x8d\x2c\x52\xb8\xbe\x2e\x10\x97\xfa\x87\x98\xb9\x82\x0a\x46\x73\xd0\xda\x7f\xde\xaa\x3c\x06\xfc\xaf\x98\x1e\xd4\x4e\xa5\x29\x87\xf9\x01\xb3\x3a\x3c\x41\x0a\xe2\x06\x28\x0d\xa8\xc2\xce\xd1\x4c\xef\x0d\x7d\xd5\xc3\x38\x9b\xa1\xcb\x30\x8a\x73\xc5\xc3\xc4\xff\xa8\xbd\xdb\x27\xd6\x21\xa8\x61\x4e\x03\xa4\x4d\x2d\xe0\x4f\x92\x8f\xe1\xe3\x99\x88\xf5\x47\xf1\xe1\x6d\xa6\x3b\xbd\xbb\xc7\xe0\x42\xbd\x7d\xec\x96\x7f\xd5\x16\x82\xde\xd7\xed\xff\x23\xbd\x41\x07\x73\x9a\x1d\x63\xfb\x4e\x2c\xed\xa2\xeb\x79\x9c\x7e\x9e\x7e\x05\x00\x00\xff\xff\x3a\x6d\xab\x3d\x09\x03\x00\x00")

func configCsscombJsonBytes() ([]byte, error) {
	return bindataRead(
		_configCsscombJson,
		"config/.csscomb.json",
	)
}

func configCsscombJson() (*asset, error) {
	bytes, err := configCsscombJsonBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/.csscomb.json", size: 777, mode: os.FileMode(436), modTime: time.Unix(1498815240, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configEditorconfig = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x7c\x90\x31\x4f\xf3\x30\x10\x86\x77\xff\x8a\x93\xba\x7d\xca\xd7\x01\x31\xb0\x74\x82\x0e\x0c\xfc\x82\x2a\xb2\xdc\xf8\x9c\x5c\x71\xce\x95\xef\x4a\x28\x55\xfe\x3b\xb2\x09\x20\x55\xc0\x76\x7a\xfd\xfa\xb9\x47\xb7\x82\xad\x27\x4d\xf9\x3e\x71\xa0\x1e\x06\x8c\x47\x01\x8f\x2f\x18\xd3\x11\x73\x19\x03\x31\x82\x63\x0f\xa3\x23\x56\x47\x0c\x5d\x62\x21\x51\x64\x35\x2b\xe8\x92\x27\xee\x41\xf4\x1c\x51\x60\x8f\x3a\x21\x32\x78\x0a\x01\x33\xb2\x02\x56\xbc\x54\xc2\xe3\xc3\x56\xcc\x6a\x89\xba\xba\x71\x9d\x72\x6f\x4c\x4e\x49\x61\x03\x9a\x4f\x68\xcc\xee\x5f\x6b\x90\xbd\x4d\xc1\xc6\xb2\x7b\x03\x31\x98\x6e\x70\x59\xb0\x94\x4e\x1a\xfe\xdf\x19\xcd\x34\x5a\xcd\x8e\x22\x71\x6f\xa7\x81\x14\xe5\xe8\x3a\xfc\xa4\x10\x0b\x66\xb5\x81\xd8\x45\xcb\x38\x2d\xa4\xe5\xcd\x23\xab\xad\xca\xb0\x81\xfa\xef\x2b\xa4\xb7\x92\xdd\x16\x8d\xf5\xb0\x97\xf6\x37\x52\x70\x51\xaa\xec\xfa\x72\x90\x46\xa5\x39\xc8\x6b\x73\x1e\x63\x73\x90\xc4\x73\x7b\xc5\xbb\xf9\x68\x96\xb3\xcc\xed\x5f\xf2\xdf\xd8\x3e\xb5\xd7\xa6\xea\xf6\xc6\xec\x2e\x4f\xee\x19\x03\x45\x6c\x60\x5c\xa6\xf9\xc7\xea\x7b\x00\x00\x00\xff\xff\x1e\xe9\x9f\x9a\xdc\x01\x00\x00")

func configEditorconfigBytes() ([]byte, error) {
	return bindataRead(
		_configEditorconfig,
		"config/.editorconfig",
	)
}

func configEditorconfig() (*asset, error) {
	bytes, err := configEditorconfigBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/.editorconfig", size: 476, mode: os.FileMode(436), modTime: time.Unix(1499766237, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configEslintrcJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\x90\xc1\x6a\xf3\x30\x10\x84\xef\x7e\x8a\x41\xe7\xf8\xf7\x7f\x76\xe9\xa1\x97\x9e\xfa\x06\x25\x14\xd9\x9a\x24\x02\x45\x2b\x76\xa5\x36\x10\xfc\xee\xc5\x26\xa4\x2d\x39\xec\x69\xe6\xfb\xd8\xdd\xb3\x84\x96\xf8\x8f\x97\x22\x5a\x0d\xcf\xb8\x76\x00\x2f\x95\x39\xd8\x08\xe7\xa3\x4e\x79\xea\x27\x6f\x74\xbb\x0e\x28\xa9\x1d\x63\xb6\x11\xef\x2e\x9e\x57\xc4\xed\xe0\x8a\xb2\xd6\x48\x75\xfb\xb5\xa2\x2d\xd1\xc6\xcd\x83\x9f\x6c\xb8\x97\x46\x38\xaa\x8a\x6e\x3e\xe0\xe6\x19\xb2\xf4\xbc\x54\xf5\x99\xd2\xac\x0f\x2c\xcc\x81\x79\x8e\x34\x37\xe2\xff\x43\xb7\x65\xa5\x49\xfa\x64\x78\x8c\xb7\xf5\x2d\x4a\xfe\x8d\x1e\x5a\x9e\xfb\xec\xcf\x7f\x7c\x9b\x28\x50\x6d\x16\x65\x1f\x7c\x3e\x26\x6e\x31\x86\x01\x13\x67\xdf\x8c\x90\x03\x3e\xac\x15\xea\x9d\x29\xa9\xd9\x3a\x6e\xfd\xc3\xed\x18\x5c\xe1\x53\x92\xaf\x57\xd1\x37\x91\xf2\x72\xa8\xd4\x7a\x92\x76\x3c\x55\x1b\x51\xb5\x11\xcb\xbe\x03\x96\x6e\x79\xea\xbe\x03\x00\x00\xff\xff\x8c\xcd\x00\x2e\x76\x01\x00\x00")

func configEslintrcJsBytes() ([]byte, error) {
	return bindataRead(
		_configEslintrcJs,
		"config/.eslintrc.js",
	)
}

func configEslintrcJs() (*asset, error) {
	bytes, err := configEslintrcJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/.eslintrc.js", size: 374, mode: os.FileMode(436), modTime: time.Unix(1498815240, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _configGitignore = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x64\xcf\x41\x6e\xc4\x20\x0c\x05\xd0\xbd\x4f\x11\x69\x76\x91\x02\x47\x8a\x08\xb8\x94\x19\xf8\x46\xd8\xa4\x9a\xdb\x57\xc9\x74\xd7\x8d\xe5\x67\x79\xf1\xff\x63\x91\x69\x7d\xda\x12\x90\x96\x2a\x59\xc9\xa7\xa2\x46\xde\x5a\x27\x7f\xcc\x52\x13\xf9\x28\x27\x8f\x90\xd9\xaf\x74\xbf\xac\xae\x4a\x26\xc7\x5a\x0b\x2c\x86\xf8\xcd\xe4\x9d\x06\xd5\xed\x03\x7a\x2c\x89\x3b\x23\x31\x62\x61\x25\x0f\x49\xbc\x37\x49\xb3\x5e\x3a\xe4\x87\xc7\x1e\xa5\x75\x01\xc3\x94\x9e\xda\xdb\xde\x43\x7c\x85\xcc\xea\xe9\x6f\xdb\xaa\xc4\x97\x7b\xaa\x80\x5c\x1e\x13\x46\x0e\xbd\x11\x7a\xdb\x12\x1f\x33\x5f\x21\x56\x7a\x87\x81\x7f\xe6\x31\x64\x7c\xec\xee\x43\x81\x71\x1e\xc5\xde\x57\x36\xc6\x59\x86\xa0\x31\x6c\x89\x82\xaf\x72\x75\xc1\x79\x0f\x57\x25\x86\x4a\xbf\x01\x00\x00\xff\xff\xfb\x3e\x0f\x6b\x17\x01\x00\x00")

func configGitignoreBytes() ([]byte, error) {
	return bindataRead(
		_configGitignore,
		"config/.gitignore",
	)
}

func configGitignore() (*asset, error) {
	bytes, err := configGitignoreBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config/.gitignore", size: 279, mode: os.FileMode(436), modTime: time.Unix(1499765502, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _hooksPreCommit = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x96\xdf\x6f\xdb\x36\x10\xc7\xdf\xf9\x57\xdc\x54\x01\x8e\x83\x52\xda\xf6\xd8\x36\x1b\x3a\xff\xc8\x0c\x24\xd1\x50\x1b\xdd\x43\x57\x04\x94\x44\x49\xe7\x51\xa4\x40\x52\x4e\x5d\xec\x8f\x1f\x44\x49\x76\xec\xd8\x71\x1d\x20\x4f\x16\x78\x3f\x78\xf7\xbd\x0f\x0f\x7e\xf3\x53\x18\xa3\x0c\x63\x66\x0a\x42\x6e\xa3\xf1\x6c\x3a\x9b\x8c\xef\xa7\xb3\x9b\xc9\xfc\xca\xbf\xc8\xd1\x42\x8a\x59\x06\x94\x4a\x56\x72\xaa\xa4\x58\x43\x7b\xac\xf9\x8a\x56\x4c\x1b\x0e\x7f\x4e\x3e\x8e\x87\xf0\x1f\xe4\x9a\x57\x40\x57\x30\x08\xcc\x2a\x1f\xec\x1c\x54\x72\xef\x60\x59\xed\x1d\x18\xc9\xaa\xc1\x90\x90\x37\x30\x2a\x78\xf2\x2f\x24\xc6\x24\xaa\x8c\x09\x19\xcd\xe7\xa3\xe8\xf6\x8f\x2b\xff\xe2\xa1\xc0\xa4\xe8\x0d\xf0\xeb\x6f\x10\xa6\x7c\x15\xca\x5a\x88\x21\xc1\x0c\xbe\x7c\x01\xfa\x1d\x3c\xbf\x0b\xf0\xe0\xeb\xd7\xf7\x60\x0b\x2e\x09\x00\x40\xc2\x2c\x7c\xf8\xf0\xcf\x24\x9a\x92\x89\xd6\x4a\xbf\xdb\x24\x42\x03\x52\x59\x40\x69\x2c\x13\x82\xa7\x01\x21\x7f\xa3\x2d\x60\xcd\xb4\x7c\x47\x5c\x70\xf3\x09\xb9\x50\x31\x13\xc0\xd2\x74\x5b\x9c\x73\xbc\xfb\xeb\xb6\xf3\x93\x55\xd9\xe7\x01\x9a\x6f\xdd\x3e\xc6\x4a\x5b\x94\x39\x24\xaa\x2c\xd1\x06\xa4\x29\xa3\x09\xe0\xdf\xd0\xc2\x2f\x24\xc3\xa6\x71\x5b\x70\xcd\xa1\xc4\xbc\xb0\x10\x73\x28\x6b\x61\xb1\x12\x1c\x4c\x1d\xa7\xa8\x79\x62\x95\x46\x6e\xe0\xa1\xb9\x73\x63\xec\xbb\x48\x94\xcc\x30\xaf\x35\xb3\xa8\xa4\x21\x99\xd2\xbd\xe9\xbe\x35\x01\x4a\xf0\x2f\x32\x94\x29\x04\xe0\xa6\x09\x83\xa0\x73\x09\x96\x46\xc9\xc1\xf0\x3d\xa4\xaa\x15\xab\x4b\x4a\x69\x17\xeb\xf9\xbb\xc9\x3c\xa0\x54\xa0\xb4\xe0\xef\x22\xe3\xa2\xdb\x59\xf8\xbf\x03\x95\x1c\x7e\xde\x1d\x83\x6b\x3a\x29\x14\x78\x6e\x0a\x90\x29\x5d\x32\xeb\xb4\xa9\x8d\x53\xa8\xbd\xe7\x2d\xb0\x3d\xcd\xbc\x6d\x7c\x2b\x5a\xf3\x99\x21\x49\x95\xe4\x5b\x6c\x78\x8a\x56\xe9\xb6\x48\x42\x26\xe3\xd9\x22\xfa\x34\x8a\xee\xa6\xb3\xeb\xfb\x45\x14\xdd\xcc\x37\x18\x3d\x76\xa4\x56\x29\x61\x8e\x13\xf5\x34\xcd\x49\xb8\x0e\xa4\x7f\x01\x67\x4f\xb3\x9c\x42\xee\x50\xc4\x8f\xd0\xd7\xf0\x92\xa1\xe0\x8e\x92\xdd\x99\x6e\xa8\x38\xd0\x53\xe2\x44\xf7\xfc\x26\xd4\x23\x3f\x34\xfd\x47\x5a\x2d\x1c\xf0\xcc\x41\x6f\x3a\x12\x78\xea\xea\x30\x6f\xa1\x12\x9c\x19\x0e\x19\x7e\x6b\x12\x94\x01\x7c\xe2\x25\x2f\x63\xae\x61\xad\x6a\x48\x98\x6c\xea\xb2\x05\x1a\x88\xd7\xb0\xac\x8d\xed\x08\xb2\x05\x87\x4c\x09\xa1\x1e\xfa\x9e\x99\x4c\x3b\xb5\x8e\xb4\xd1\xdc\x51\x31\x5b\x84\x56\x85\xe5\x3a\x74\x05\x84\x97\x97\xe1\xe5\x33\xe2\x1d\x23\x71\x32\xbf\x99\xdd\x2d\xb6\x9c\x19\xf7\x4e\x8e\xb3\xe5\xdc\x4f\xf3\xd4\xa6\x79\x09\x43\x6d\x64\xfb\xd3\xbd\x67\xca\x50\xc7\x32\xa6\x71\x23\x70\x67\xa9\x44\x9d\xa3\xa4\x58\x56\x4a\xdb\xbd\xc3\x4a\x73\x6b\x91\x6b\xe8\x3f\x4e\x62\xf8\x3a\x97\xbe\xe2\x1e\xed\x2a\x3e\xb0\x46\x5b\xcb\x73\x5b\xb4\xf5\xd0\x49\xb0\x34\x8f\x96\x68\x97\x91\x26\xe0\xf9\x3b\x39\x3c\xf0\xfc\x8b\x14\xb5\x8b\xa6\xf4\x89\x79\xe8\xd0\x0b\x96\xc6\x3b\x77\x9d\x1a\xc8\x54\x2d\x53\x60\x49\xa2\x74\xea\x1e\x83\x3a\xd8\xd9\xf9\xeb\x35\xaa\x2c\x96\xf8\x9d\xc3\xfc\xf3\x35\x60\xc9\xf2\x5e\x41\xb3\xca\x15\x99\x7f\xbe\x8e\x36\xc8\x37\x27\xc7\x81\x6f\x5c\x9f\xc1\xfd\xc4\x6a\x7a\xc1\x3f\x92\xc1\xa5\xfb\x3f\xb2\x1d\x8c\xab\x8f\x52\x94\x55\x6d\xaf\xfa\xdd\x75\xb6\xd2\xaa\x15\xa4\x91\xd0\xac\xf2\xad\x16\x67\x4a\xfb\x7f\x00\x00\x00\xff\xff\x16\xc2\x0b\x0a\x80\x09\x00\x00")

func hooksPreCommitBytes() ([]byte, error) {
	return bindataRead(
		_hooksPreCommit,
		"hooks/pre-commit",
	)
}

func hooksPreCommit() (*asset, error) {
	bytes, err := hooksPreCommitBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "hooks/pre-commit", size: 2432, mode: os.FileMode(509), modTime: time.Unix(1499765666, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config/.csscomb.json": configCsscombJson,
	"config/.editorconfig": configEditorconfig,
	"config/.eslintrc.js": configEslintrcJs,
	"config/.gitignore": configGitignore,
	"hooks/pre-commit": hooksPreCommit,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config": &bintree{nil, map[string]*bintree{
		".csscomb.json": &bintree{configCsscombJson, map[string]*bintree{}},
		".editorconfig": &bintree{configEditorconfig, map[string]*bintree{}},
		".eslintrc.js": &bintree{configEslintrcJs, map[string]*bintree{}},
		".gitignore": &bintree{configGitignore, map[string]*bintree{}},
	}},
	"hooks": &bintree{nil, map[string]*bintree{
		"pre-commit": &bintree{hooksPreCommit, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

